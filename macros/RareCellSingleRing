/* 1 channel Rare cell segmenting, with 1 ring  By Arya Bahrami  3/26/21

//to use this Script:
- Open your tif
- Set below:
	- which channel in the image you want segmented.
	- Thickness of the ring

- run script.
- follow prompts to threshold your channel.  you must APPLY each threshold before you hit OK!!!!

- it will create 1 Mask of the cell marker A, a Ring Mask, and an overlay (Overlay is 3 channel for the time being)
- the files will be saved in a subfolder "ImageJ script Output"
 Usage notes: your Marker thresholds determine everything, test a few different thresholds before you commit to a strategy.
 
*//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//set these:

//erode margine: Determines how rare cell mask is erroded. This makes cleaner masks at the risk of reducing the number of cells collected.
erode_margin = 0;  //in microns

//Channels in the tif file that will be used
channel_A = 3;

ringWidth = 10;		//in microns

//overlay line width: controls the line thickness in the overlay image.
run("Line Width...", "line=2");

//TOUCH NOTHING BELOW HERE!!!!!!!!!!!
//-----------------------------------------------------------
//-----------------------------------------------------------
//no touchy:

//colorArray = newArray("Blue","Green","Yellow","Red");	//this array has the color channels in order

setForegroundColor(255, 255, 255)
thick = ringWidth*2.53465346;
ringNumber = 1;

maskArray = newArray("Mask A","Mask B","Mask C", "Mask D");

pixel_margin= round(erode_margin*2.53465346)-1;  //converts micron erode to pixels and rounds
run("Options...", "iterations=1 count=1");			//forgot why I do this, but something about different users settings messing things up.


//makes a file for output files
dir = getDirectory("image");
	path = dir + File.separator + "ImageJ script output" + File.separator;   //MUST BE ENDED WITH a "File.separator" or it wont work!
	if(!File.exists(path)){
		File.makeDirectory(path);
	}

A_Chan ="channel-000" + channel_A;
//B_Chan ="channel-000" + channel_B;

run("Clear Results");	//clean up old results

name = getInfo("image.filename");		//get its name
fileextensionindex = indexOf(name, ".tif");
name = substring(name,0,fileextensionindex);		//this clips the name to just ROI###

	rename("channel");
	run("Stack to Images");
	
// bright/contrast enhanced RGB image.	
	selectWindow("channel-0001");				// note that blue is the original, not a copy
	run("Enhance Contrast", "saturated=0.35");
	run("Duplicate...", "title=blue-channel");
	selectWindow("channel-0002");
	run("Duplicate...", "title=green-channel");
	run("Enhance Contrast", "saturated=0.35");
	selectWindow("channel-0003");
	run("Duplicate...", "title=red-channel");
	run("Enhance Contrast", "saturated=0.35");
	run("Merge Channels...", "c1=" + "red-channel" + " c2=" + "green-channel" + " c3=" + "blue-channel");	
	selectWindow("RGB");
	rename(name + "_overlay");
	
ThresholdAndFilter(A_Chan,400,300);			//both chosen channels are filtered with "immune" filters.
run("Duplicate...", "title=A_Chan2");		//create duplicates for image math
	
PutaRingOnIt(A_Chan, thick, ringNumber);
selectWindow("Ring1");
rename("Mask B");				//bunch of redundant naming commands because nothing would work and debug mode kept crashing
rename(maskArray[1]);			// ring masks come out of method already lut inverted

selectWindow(A_Chan);
run("Select None");
erodeNumber(pixel_margin);		// this will erode the rare cell mask by the selected erosion margin above.  
rename("Mask A");	
rename(maskArray[0]);
run("Invert LUT");				//Mask A is not LUT inverted


imageCalculator("Add create", "Mask B", "CenterMask");
selectWindow("Result of Mask B");
run("Invert");
erodeNumber(4);
rename("Mask C");	
rename(maskArray[2]);

  // This code will smooth out the cell masks.  has risk of ROI area reductions.
//simplify, Polish
	for (k=0; k<3;k++){
		selectWindow(maskArray[k]);
		erodeNumber(2);
		dilateNumber(1);
	}

//this makes and saves an overlay	//someday will condense this in a clever way
	selectWindow(maskArray[0]);
	run("Create Selection");
	run("Make Inverse");
	selectWindow(name +"_overlay");
	setForegroundColor(0, 255, 0);
	run("Restore Selection");
	run("Draw", "slice");
	
	selectWindow(maskArray[1]);
	run("Create Selection");
	run("Make Inverse");
	selectWindow(name + "_overlay");
	setForegroundColor(255, 0, 0);
	run("Restore Selection");
	run("Draw", "slice");

	selectWindow(maskArray[2]);
	run("Create Selection");
	run("Make Inverse");
	selectWindow(name + "_overlay");
	setForegroundColor(0,255,255);
	run("Restore Selection");
	run("Draw", "slice");



//save the overlay jpg	
	saveAs("Jpeg",path + name + "_overlay.jpg");
//This saves all the masks	
for (k=0; k<3;k++){
		selectWindow(maskArray[k]);
		saveAs("PNG",path + name+ "_" + maskArray[k]);
	}
	run("Close All");	//close unused windows
	selectWindow("Threshold");	//Close threhold tool window
	run("Close");

//=============================================================
//All tools and functions are below
//=============================================================

	function	MaskZoneMasker (target, zone){
	
	selectWindow(target);
	run("Duplicate...", "title=targetcopy");		//create duplicates for image math
	selectWindow(zone);
	run("Create Selection");
	run("Make Inverse");
	selectWindow("targetcopy");
	run("Invert");
	run("Restore Selection");
	run("Clear Outside");
	run("Select None");
	run("Invert");
	rename(target +"_AND_"+ zone);
	}

	function PutaRingOnIt (target, thick, Num) { //target a mask image, specify ring thickness, number of rings
		setForegroundColor(255, 255, 255);  //resets draw color to white
		setBackgroundColor(0, 0, 0);
		height = getHeight;
		width = getWidth;
		selectWindow(target);			//selects target window
		run("Create Selection"); // grabs everything on the image
		newImage("CenterMask", "8-bit black", width, height, 1);
		run("Restore Selection");
		run("Make Inverse");
		run("Invert");
		run("Select None");

		//in this context (255= white) dilate and erode are behaving opposite.
		//this step "Pads" the initial selection to mask a little more area in the center.
		dilateNumber(0);
		erodeNumber(3);

		run("Create Selection");
		run("Add to Manager");
		run("Select None");
		run("Invert");

		for(i = 1; i <= ringNumber; i++)
		{
			newImage("Ring" + i, "8-bit black", width, height, 1);
			roiManager("Select",0);
	
			run("Enlarge...", "enlarge=thick");
			run("Make Inverse");
			run("Add to Manager");
			roiManager("Deselect");

			roiManager("Combine");

			run("Make Inverse");
			run("Fill", "slice");
			run("Clear Outside");

			roiManager("Select",0);
			roiManager("Delete");

			roiManager("Select",0);
			run("Make Inverse");
			run("Add to Manager");
			roiManager("Select",0);
			roiManager("Delete");
		}

		roiManager("Select",0);
			roiManager("Delete");
		selectWindow("ROI Manager");
		run("Close");
	}

	function ThresholdAndFilter(channel, fill, particle){	//this function needs a channel, a number for the holesize fill, and a number for particle removal.
		selectWindow(channel);				
		call("ij.plugin.frame.ThresholdAdjuster.setMode", "B&W");
		run("Threshold...");
		setAutoThreshold("Li dark");
		setOption("BlackBackground", false);
		waitForUser("threshold the image, hit apply.  Push OK when finished");
		run("Convert to Mask");
		erodeNumber(1);				//hardcoded erode and dilate.
		dilateNumber(2);
		fillHoleSize("fill" , channel);			//if you use the local variable name as a string, you can can pass it to another function. not sure why Channel is unaffected
		removeParticles("particle",channel);
}

	function dilateNumber (n){
			for (i=0; i<n; i++){
			run("Convolve...", "text1=[0 1 0\n1 1 1\n0 1 0 \n]");  //this is a Cross shaped kernel for dilating
		}
	}
			
	function erodeNumber (n){
		run("Invert");
		for (i=0; i<n; i++){
			run("Convolve...", "text1=[0 1 0\n1 1 1\n0 1 0 \n]");  //this is a Cross shaped kernel for dilating
		}
		run("Invert");
	}		

	function fillHoleSize(n,mask){
		selectWindow(mask);
		run("Invert");
		run("Analyze Particles...", "size=0-" + n + " pixel circularity=0-1.00 show=Masks");
		selectWindow("Mask of " + mask);
		run("Create Selection");
		selectWindow(mask);
		run("Restore Selection");
		run("Invert");
		run("Select None");	
		run("Invert");
		selectWindow("Mask of " + mask);
		close();
		selectWindow(mask);
	}
	
	function removeParticles(n,mask){
		selectWindow(mask);
		run("Analyze Particles...", "size=0-" + n + " pixel circularity=0-1.00 show=Masks");
		selectWindow("Mask of " + mask);
		run("Select None");	
		run("Create Selection");
		selectWindow(mask);
		run("Restore Selection");
		run("Invert");
		run("Select None");	
		selectWindow("Mask of " + mask);
		close();
		selectWindow(mask);
	}

	function removeOverlap(source,target){  //this function modifies both target and source images. so use copies if youstill need the source.
		selectWindow(source);
		dilateNumber(pixel_margin);
		run("Create Selection");
		selectWindow(target);
		run("Restore Selection");
		run("Fill", "slice");
		run("Select None");
		selectWindow(source);
		close();
	}
